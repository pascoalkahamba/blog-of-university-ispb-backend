datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Student {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  username           String
  password           String
  blocked            Boolean?
  blockedQuantity    Int?
  registrationNumber String    @unique
  course             Course?
  active             Boolean
  role               Role      @default(USER)
  comments           Comment[]
  contact            String    @unique
  replies            Reply[]
  year               String
  profile            Profile?
}

model Admin {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  username String
  password String
  role     Role      @default(ADMIN)
  comments Comment[]
  posts    Post[]
  contact  String    @unique
  replies  Reply[]
  profile  Profile?
}

model Coordinator {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  username        String
  password        String
  blocked         Boolean?
  blockedQuantity Int?
  role            Role       @default(COORDINATOR)
  course          Course?
  comments        Comment[]
  posts           Post[]
  contact         String     @unique
  department      Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId    Int
  replies         Reply[]
  profile         Profile?
}

model Profile {
  id            Int          @id @default(autoincrement())
  bio           String
  photo         Picture?
  student       Student?     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId     Int?         @unique
  admin         Admin?       @relation(fields: [adminId], references: [id])
  adminId       Int?         @unique
  coordinator   Coordinator? @relation(fields: [coordinatorId], references: [id], onDelete: Cascade)
  coordinatorId Int?         @unique
}

model Course {
  id            Int          @id @default(autoincrement())
  name          String
  student       Student?     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId     Int?         @unique
  subjects      Subject[]
  department    Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId  Int
  coordinator   Coordinator? @relation(fields: [coordinatorId], references: [id])
  coordinatorId Int?         @unique
}

model Comment {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  content       String       @db.LongText
  likes         Int
  statusLike    Boolean
  statusUnlike  Boolean
  unlikes       Int
  post          Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  published     Boolean      @default(false)
  replies       Reply[]
  student       Student?     @relation(fields: [studentId], references: [id])
  studentId     Int?
  admin         Admin?       @relation(fields: [adminId], references: [id])
  adminId       Int?
  postId        Int
  coordinator   Coordinator? @relation(fields: [coordinatorId], references: [id])
  coordinatorId Int?
}

model Post {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  title         String       @unique
  content       String       @db.LongText
  picture       Picture?
  views         Int?
  likes         Int
  statusLike    Boolean
  statusUnlike  Boolean
  unlikes       Int
  favorite      Boolean?
  admin         Admin?       @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId       Int?
  coordinator   Coordinator? @relation(fields: [coordinatorId], references: [id], onDelete: Cascade)
  department    Department   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  coordinatorId Int?
  departmentId  Int
  comments      Comment[]
}

model Reply {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  content       String       @db.LongText
  likes         Int
  statusLike    Boolean
  statusUnlike  Boolean
  unlikes       Int
  published     Boolean      @default(false)
  student       Student?     @relation(fields: [studentId], references: [id])
  comment       Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  studentId     Int?
  commentId     Int
  admin         Admin?       @relation(fields: [adminId], references: [id])
  adminId       Int?
  coordinator   Coordinator? @relation(fields: [coordinatorId], references: [id])
  coordinatorId Int?
}

model Department {
  id           Int           @id @default(autoincrement())
  name         String
  posts        Post[]
  files        File[]
  photos       Picture[]
  courses      Course[]
  coordinators Coordinator[]
}

model Subject {
  id      Int      @id @default(autoincrement())
  name    String
  courses Course[]
}

enum Role {
  USER
  ADMIN
  COORDINATOR
}

model Picture {
  id           Int         @id @default(autoincrement())
  url          String      @db.LongText
  name         String
  post         Post?       @relation(fields: [postId], references: [id])
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  profile      Profile?    @relation(fields: [profileId], references: [id])
  profileId    Int?        @unique
  postId       Int?        @unique
  departmentId Int?        @unique
}

model File {
  id           Int         @id @default(autoincrement())
  name         String
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId Int?
  url          String
  createdAt    DateTime    @default(now())
}
